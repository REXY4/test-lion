import Head from "next/head";
import React, { useEffect, useState } from "react";
import styles from "@/styles/Home.module.css";
import NavbarBasic from "@/components/Navbars";
import { Col, Container, Row } from "react-bootstrap";
import { connect } from "react-redux";
import BasicModal from "@/components/ModalBasic";
import { getAllProduct, getDetail } from "@/actions/product";
import { AddCart } from "@/actions/cart";
import { login } from "@/actions/auth";
import CardProduct from "@/components/CardProduct";
import PaginationBasic from "@/components/Pagination";

interface State {
    modal: {
        modalAuth: boolean;
    };
    product: {
        product: any;
    };
    user: {
        user: any;
    };
    cart: {
        cart: any;
    };
}

interface Props {
    modalAuth: boolean;
    dispatch: any;
    getAllProduct: any;
    product: any;
    login: any;
    AddCart: any;
    user: any;
    cart: any;
    getDetail : any
}

const Home: React.FC<Props> = ({
    user,
    modalAuth,
    getAllProduct,
    product,
    login,
    AddCart,
    cart,
}) => {
    const [currentPage, setCurrentPage] = useState(0);
    const [previousPage, setPreviousPage] = useState(8);

    useEffect(() => {
        getAllProduct();
    }, []);

    const handlePagination = (num: number) => {
        setCurrentPage(num * 8);
        setPreviousPage((num + 1) * 8);
    };

    const handlePrev = () => {
        setCurrentPage((previous: number) => {
            if (previous === 0) {
                return 0;
            } else {
                return previous - 8;
            }
        });

        setPreviousPage((previous: number) => {
            if (previous === 8) {
                return 8;
            } else {
                return previous - 8;
            }
        });
    };

    const handleNext = () => {
        const productLength: number = product.length - 8;
        setCurrentPage((previous: number) => {
            if (previous >= productLength) {
                return previous;
            } else {
                return previous + 8;
            }
        });
        setPreviousPage((previous: number) => {
            if (previous >= product.length) {
                return previous;
            } else {
                return previous + 8;
            }
        });
    };

    const handleFirst: any = () => {
        setCurrentPage(0);
        setPreviousPage(8);
    };

    const handleLast: any = () => {
        setCurrentPage(product.length - 8);
        setPreviousPage(product.length);
    };

    return (
        <>
            <Head>
                <title>Next Test</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <NavbarBasic show={false} showDrawer={false} />
                <Container>
                    <div className={styles["background-right"]} />
                    <Row className="mt-5">
                        <Col md={6}>
                            <div className="mt-5">
                                <h1 className={styles.title}>Welcome</h1>
                                <p className={styles.paragraft}>
                                    Lorem ipsum dolor sit amet consectetur
                                    adipisicing elit. Expedita recusandae
                                    debitis, sint molestiae tempore repudiandae
                                    minus explicabo sed dolor obcaecati? Iusto
                                    obcaecati eius veniam officiis nobis rerum
                                    ab impedit vel?
                                </p>
                            </div>
                        </Col>
                    </Row>
                    <Row className="mt-5">
                        {product
                            .slice(currentPage, previousPage)
                            .map((item: any) => {
                                return (
                                    <Col
                                        key={item.name}
                                        md={3}
                                        className={`mb-4 ${styles["card-product"]}`}
                                    >
                                        <CardProduct
                                            addCart={AddCart}
                                            image={item.image}
                                            name={item.name}
                                            variant={item.variant}
                                            description={item.description}
                                            userId={user && user[0].id}
                                        />
                                    </Col>
                                );
                            })}
                    </Row>
                    <Row className="mt-4 mb-5">
                        <Col className="d-flex justify-content-center" md={12}>
                            <PaginationBasic
                                handleFirst={handleFirst}
                                handleLast={handleLast}
                                handlePage={handlePagination}
                                handlePrev={handlePrev}
                                handleNext={handleNext}
                                data={product}
                            />
                        </Col>
                    </Row>
                </Container>
                <BasicModal login={login} show={modalAuth} />
            </main>
        </>
    );
};

const mapStateToProps = (state: State) => ({
    modalAuth: state.modal.modalAuth,
    product: state.product.product,
    user: state.user.user,
    cart: state.cart.cart,
});

export default connect(mapStateToProps, { getAllProduct, login, AddCart })(
    Home
);
